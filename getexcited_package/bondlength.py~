#/usr/bin/python

'''

This function calculates a user-specified bond length in time.

The bond length is calculated between two atoms at every time-step
and may be tracked along a single trajectory or an ensemble of
trajectories during adiabatic or non-adiabatic dynamics.  The
user must supply the line numbers of two atoms, where the first atom
between '&coord' and '&endcoord' in 'input.ceon' is always labeled with
line number = 0.

Type of calculation:

[1] Single Trajectory
< collection time (fs)
> time (fs), bond length (Angstroms)

[2] Ensemble of Trajectories

[2a] Mean
< collection time (fs)
> time (fs), bond length (Angstroms), standard deviation (Angstroms)

[2b] All time-steps
> trajectory directory, bond length (Angstroms) at all time-steps and
trajectories

Output Files:
- bl_[type].out, where [type] = single, mean_ensemble, raw_ensemble

Error Files:
- bl_[type].err, where [type] = single, mean_ensemble, raw_ensemble

'''

import numpy as np
import os
import sys
import glob
import fileinput
import math

CWD = os.getcwd()

def BONDLENGTH():

    print 'Calculating a bond length as a function of time.'

    ## TYPE OF CALCULATION AND DIRECTORY CHECK ##
    DYNQ = input('Calculate bond length along one trajectory or an ensemble of trajectories? Answer ONE [1] or ENSEMBLE [0]: ')
    if DYNQ not in [1,0]:
        print 'Answer must be 1 or 0.'
        sys.exit()
    if DYNQ == 0: ## ENSEMBLE
        NEXMDIR = raw_input('Ensemble directory [e.g. nexmd]: ')
        if not os.path.exists(NEXMDIR):
            print 'Path %s does not exist.' % (NEXMDIR)
            sys.exit()
        ## CHECK IF NEXMD FOLDERS EXIST ##
        NEXMDS = glob.glob('%s/NEXMD*/' % (NEXMDIR))
        NEXMDS.sort()
        if len(NEXMDS) == 0:
            print 'There are no NEXMD folders in %s.' % (NEXMDIR)
            sys.exit()
        ## DETERMINE MEAN OR ALL ##
        TYPEQ = input('Output mean BLA in time or output BLA at all time-steps and trajectories? Answer MEAN [0] or ALL [1]: ')
        if TYPEQ not [0,1]:
            print 'Answer must be 0 or 1.'
            sys.exit()
    if DYNQ == 1: ## SINGLE TRAJECTORY
        TPYEQ = 0
        NEXMDIR = raw_input('Single trajectory directory: ')
        if not os.path.exists(NEXMDIR):
            print 'Path %s does not exist.' % (NEXMDIR)
            sys.exit()

    ## USER-DEFINED LENGTH OF ANALYSIS AND INITIALIZE ARRAYS ##
    if DYNQ == 0: ## ENSEMBLE
        if not os.path.exists('%s/header' % (NEXMDIR)):
            print 'Path %s/header does not exist.' % (NEXMDIR)
            sys.exit()
        HEADER = open('%s/header' % (NEXMDIR),'r')
        HEADER = HEADER.readlines()
    if DYNQ == 1: ## SINGLE TRAJECTORY
        if not os.path.exists('%s/input.ceon' % (NEXMDIR)):
            print 'Path %s/input.ceon does not exist.' % (NEXMDIR)
            sys.exit()
        HEADER = open('%s/input.ceon' % (NEXMDIR),'r')
        HEADER = HEADER.readlines()
    for LINE in HEADER:
        if 'time_init' in LINE:
            TINITH = np.float(LINE.split()[0][len('time_init='):-1])
        if 'time_step' in LINE:
            DT = np.float(LINE.split()[0][len('time_step='):-1])
        if 'n_class_steps' in LINE:
            TSMAX = np.int(LINE.split()[0][len('n_class_steps='):-1]) + 1
        if 'out_data_steps' in LINE:
            ODATA = np.int(LINE.split()[0][len('out_data_steps='):-1])
        if 'out_coords_steps' in LINE:
            CDATA = np.int(LINE.split()[0][len('out_coords_steps='):-1])
        if 'natoms' in LINE:
            NATOMS = np.int(LINE.split()[0][len('natoms='):-1])

    ## COLLECTION TIME ##
    if TYPEQ == 0: ## MEAN BOND LENGTH
        if DYNQ == 0: ## ENSEMBLE
            TCOLL = input('Calculate bond length up to what time in femtoseconds?\nNote that averaged results will only include trajectories that are complete up to this time: ')
        if DYNQ == 1: ## SINGLE TRAJECTORY
            TCOLL = input('Calculate bond length up to what time in femtoseconds? ')
        if isinstance(TCOLL, int) == False and isinstance(TCOLL, float) == False:
            print 'Time must be integer or float.'
            sys.exit()
        if TCOLL < 0:
            print 'Time must be integer or float greater than zero.'
            sys.exit()
        TCOLL = np.float(TCOLL)
        if TCOLL > (TSMAX - 1)*DT:
            TCOLL = (TSMAX - 1)*DT
    if TYPEQ == 1: ## ALL BLA
        TCOLL = (TSMAX - 1)*DT

    ## NUMBER OF CLASSICAL STEPS ##
    TSCOL = 0
    while TSCOL*DT*ODATA <= TCOLL:
        TSCOL += 1

    ## NUMBER OF TIME-STEPS FOR COORDINATES ##
    CCOLL = 0
    NUM = 0
    while CCOLL <= TCOLL:
        CCOLL += DT*ODATA*CDATA
        NUM += 1

    ## COLLECTION TIME ##
    TIMES = np.linspace(TINITH, CCOLL - DT*ODATA*CDATA, NUM)

    # this part should be removed
    if DYNQ == 0:
        FBONDLEN = np.zeros(len(TIMES) - 1)
    # to here
        
    ## TWO UNIQUE ATOMS DEFINED BY USER ##
    LINES = input('Input the line numbers labeling the coordinates of the two atoms.\nInput an array of the form [ .., .. ]: ')
    if isinstance(LINES, list) == False:
        print 'Input must be an array of the form [atom 1, atom2], where atom# = line number of atom#.'
        sys.exit()
    if len(LINES) != 2:
        print 'Input must be an array with two elements labeling the line numbers of two atoms.'
        sys.exit()
    INDEX = 0
    for i in LINES:
        if isinstance(i, int) == False:
            print 'Element number %d of input array must be integer.\nUser inputted [%s, %s], which is not allowed.' % (INDEX + 1, LINES[0], LINES[1])
            sys.exit()
        if i < 0:
            print 'Element number %d of input array must be a positive integer.\nUser inputted [%s, %s], which is not allowed.' % (INDEX + 1, LINES[0], LINES[1])
            sys.exit()
        if i > NATOMS - 1:
            print 'Element number %d of input array must be less than the max number of atoms (-1).\nUser inputted [%s, %s], which is not allowed.' % (INDEX + 1, LINES[0], LINES[1])
            sys.exit()
        INDEX += 1
    if len(np.unique(LINES)) != 2:
        print 'All elements of input array must be unique.\nUser inputted [%s, %s], which is not allowed.' % (LINES[0], LINES[1])
        sys.exit()

    ## CALCULATE BOND LENGTH ALONG A SINGLE TRAJECTORY ##
    if DYNQ == 1: ## SINGLE TRAJECTORY
        print 'Collecting bond length along single trajectory.  Please wait ...'
        ## GENRATE OUTPUT FILE ##
        OUTPUT = open('%s/bl_single.out' % (CWD),'w')
        ETRAJ = 0
        ## DETERMINE COMPLETED NUMBER OF TIME-STEPS ##
        if not os.path.exists('%s/energy-ev.out' % (NEXMDIR)):
            print 'Path %s/energy-ev.out does not exist.' % (NEXMDIR)
            sys.exit()
        DATA = open('%s/energy-ev.out' % (NEXMDIR),'r')
        DATA = DATA.readlines()
        TSTEPS = len(DATA) - 1
        ## GENERATE ARRAY WITH INDICES OF THE COORDINATE BLOCKS ALONG A TRAJECTORY ##
        if TSTEPS >= TSCOL:
            if not os.path.exists('%s/coords.xyz' % (NEXMDIR)):
                print 'Path %s/coords.xyz does not exist.' % (NEXMDIR)
                sys.exit()
            DATA = open('%s/coords.xyz' % (NEXMDIR),'r')
            DATA = DATA.readlines()
            LENC = len(DATA)
            NCOORDS = 0
            CINDEX = 0
            TFLAG1 = 0
            TFLAG2 = 0
            ARRAY = np.array([])
            for LINE in DATA:
                if 'time' in LINE:
                    if NCOORDS == 0:
                        TINIT = np.float(LINE.split()[-1])
                        if TINIT != TINITH:
                            TFLAG1 = 1
                            break
                    else:
                        TIME = np.around(np.float(LINE.split()[-1]), decimals = 3)
                        if TIME > TCOLL:
                            TFLAG3 = 1
                            break
                        if TIME != TIMES[NCOORDS]:
                            TFLAG2 = 1
                            break
                    NCOORDS += 1
                    ARRAY = np.append(ARRAY,CINDEX)
                CINDEX += 1
            if TFLAG1 == 1:
                print 'Initial time in %s/coords.xyz does not match time_init in %s/input.ceon.' % (NEXMDIR,NEXMDIR)
                sys.exit()
            if TFLAG2 == 1:
                print 'There is an inconsistency in time-step in %s/coords.xyz.' % (NEXMDIR)
                sys.exit()
            ## APPEND LINES FOR LAST COORDINATE SET ##
            if TFLAG3 == 1:
                ARRAY = np.append(ARRAY,CINDEX)
            else:
                ARRAY = np.append(ARRAY, LENC + 1)
            ARRAY = np.int_(ARRAY)
            ## CHECKS TO ENSURE BOND LENGTH CALCULATION ##
            if NCOORDS == 0:
                print 'No coordinates were found in %s/coords.xyz' % (NEXMDIR)
                sys.exit()
            if NCOORDS == 1:
                print 'Only initial coordinates, at %.2f fs, were found in %s/coords.xyz.' % (TINIT,NEXMDIR)
                sys.exit()
            ## CALCULATE BOND LENGTH ALONG A SINGLE TRAJECTORY ##
            SBONDLEN = np.zeros(NCOORDS)
            for NCOORD in np.arange(NCOORDS):
                COORDS = DATA[ARRAY[NCOORD]+1:ARRAY[NCOORD+1]-1:1]
                VEC0 = np.float_(COORDS[LINES[0]].split()[1:])
                VEC1 = np.float_(COORDS[LINES[1]].split()[1:])
                A = np.subtract(VEC1, VEC0)
                SBONDLEN[NCOORD] = np.linalg.norm(A)
            print '%s' % (NEXMDIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
            CTRAJ = 1
            if TSTEPS == TSMAX:
                ETRAJ = 1
        else:
            print '%s' % (NEXMDIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
        TTRAJ = 1
        ## SUMMARY OF RESULTS ##
        if CTRAJ == 0:
            print 'No trajectories completed within %0*.2f.' % (len(str(TSMAX)),TCOLL)
        else:
            print 'Total Trajectories:', '%04d' % (TTRAJ)
            print 'Completed Trajectories:', '%04d' % (CTRAJ)
            print 'Excellent Trajectories:', '%04d' % (ETRAJ)
            print >> OUTPUT, 'Total Trajectories: ', '%04d' % (TTRAJ)
            print >> OUTPUT, 'Completed Trajectories: ', '%04d' % (CTRAJ)
            print >> OUTPUT, 'Excellent Trajectories: ', '%04d' % (ETRAJ)
            for NCOORD in np.arange(NCOORDS):
                print >> OUTPUT, '%0*.2f' % (len(str((TSMAX))) + 2,DT*ODATA*CDATA*NCOORD), '%08.3f' % (SBONDLEN[NCOORD])
                    
    ## CALCULATE BOND LENGTH ALONG AN ENSEMBLE OF TRAJECTORIES ##
    if DYNQ == 0 and TYPEQ == 0: ## MEAN FROM ENSEMBLE
        print 'Collecting mean bond length from ensemble.  Please wait ...'
        ## DETERMINE TOTAL NUMBER OF TRAJECTORIES IN ENSEMBLE ##
        with open('%s/totdirlist' % (NEXMDIR),'w') as DATA:
            for NEXMD in NEXMDS:
                if not os.path.exists('%s/dirlist1' % (NEXMD)):
                    print 'Path %NEXMDIRlist1 does not exist.' % (NEXMD)
                    sys.exit()
                INPUT = fileinput.input('%s/dirlist1' % (NEXMD))
                DATA.writelines(INPUT)
        DIRLIST1 = np.int_(np.genfromtxt('%s/totdirlist' % (NEXMDIR)))
        if isinstance(DIRLIST1,int) == True:
            DIRLIST1 = np.array([DIRLIST1])
        os.remove('%s/totdirlist' % (NEXMDIR))
        ## GENERATE OUTPUT AND ERROR FILES ##
        OUTPUT = open('%s/bl_mean_ensemble.out' % (CWD),'w')
        ERROR = open('%s/bl_mean_ensemble.err' % (CWD),'w')
        ## GENERATE BOND LENGTH ARRAY FOR FINAL RESULTS ##
        FBONDLEN = np.zeros(len(TIMES))
        EBONDLEN = np.zeros((len(TIMES), len(DIRLIST1)))
        TTRAJ = 0
        CTRAJ = 0
        ETRAJ = 0
        ERRFLAG = 0
        for NEXMD in NEXMDS:
            if not os.path.exists('%s/dirlist1' % (NEXMD)):
                print 'Path %dirlist1 does not exist.' % (NEXMD)
                sys.exit()
            DIRLIST1 = np.int_(np.genfromtxt('%s/dirlist1' % (NEXMD)))
            if isinstance(DIRLIST1, int) == True:
                DIRLIST1 = np.array([DIRLIST1])
            for DIR in DIRLIST1:
                ## DETERMINE COMPLETED NUMBER OF TIME-STEPS ##
                if not os.path.exists('%s/%04d/energy-ev.out' % (NEXMD,DIR)):
                    print >> ERROR, '%s%04d/energy-ev.out' % (NEXMD,DIR), 'does not exist'
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                DATA = open('%s/%04d/energy-ev.out' % (NEXMD,DIR),'r')
                DATA = DATA.readlines()
                TSTEPS = len(DATA) - 1
                ## GENERATE ARRAY WITH INDICES OF THE COORDINATE BLOCKS ALONG TRAJECTORY ##
                if TSTEPS >= TSCOL:
                    if not os.path.exists('%s/%04d/coords.xyz' % (NEXMD,DIR)):
                        print >> ERROR, '%s%04d/coords.xyz' % (NEXMD,DIR), 'does not exist'
                        ERRFLAG = 1
                        TTRAJ += 1
                        continue
                    DATA = open('%s/%04d/coords.xyz' % (NEXMD,DIR),'r')
                    DATA = DATA.readlines()
                    LENC = len(DATA)
                    NCOORDS = 0
                    CINDEX = 0
                    TFLAG1 = 0
                    TFLAG2 = 0
                    TFLAG3 = 0
                    ARRAY = np.array([])
                    for LINE in DATA:
                        if 'time' in LINE:
                            if NCOORDS == 0:
                                TINIT = np.float(LINE.split()[-1])
                                if TINIT != TINITH:
                                    TFLAG1 = 1
                                    continue
                            else:
                                TIME = np.around(np.float(LINE.split()[-1]), decimals = 3)
                                if TIME > TCOLL:
                                    TFLAG3 = 1
                                    continue
                                if TIME != TIMES[NCOORDS]:
                                    TFLAG2 = 1
                                    continue
                            NCOORDS += 1
                            ARRAY = np.append(ARRAY,CINDEX)
                        CINDEX += 1
                    if TFLAG1 == 1:
                        print >> ERROR, 'Initial time in %s%04d/coords.xyz does not match time_init in %s/header.' % (NEXMD,DIR,NEXMDIR)
                        ERRFLAG = 1
                        TTRAJ += 1
                        continue
                    if TFLAG2 == 1:
                        print >> ERROR, 'There is an inconsistency in time-step in %s%04d/coords.xyz.' % (NEXMD,DIR)
                        ERRFLAG = 1
                        TTRAJ += 1
                        continue
                    ## APPEND LINES FOR LAST COORDINATE SET ##
                    if TFLAG3 == 1:
                        ARRAY = np.append(ARRAY,CINDEX)
                    else:
                        ARRAY = np.append(ARRAY, LENC + 1)
                    ARRAY = np.int_(ARRAY)
                    ## CHECKS TO ENSURE BOND LENGTH CALCULATION ##
                    if NCOORDS == 0:
                        print >> ERROR, 'No coordinates were found in %s%04d/coords.xyz' % (NEXMD,DIR)
                        ERRFLAG = 1
                        TTRAJ += 1
                        continue
                    if NCOORDS == 1:
                        print >> ERROR, 'Only initial coordinates, at %.2f fs, were found in %s%04d/coords.xyz.' % (TINIT,NEXMD,DIR)
                        ERRFLAG = 1
                        TTRAJ += 1
                        continue
                    ## CALCULATE BOND LENGTH ALONG A SINGLE TRAJECTORY ##
                    SBONDLEN = np.zeros(NCOORDS)
                    for NCOORD in np.arange(NCOORDS):
                        COORDS = DATA[ARRAY[NCOORD]+1:ARRAY[NCOORD+1]-1:1]
                        VEC0 = np.float_(COORDS[LINES[0]].split()[1:])
                        VEC1 = np.float_(COORDS[LINES[1]].split()[1:])
                        A = np.subtract(VEC1, VEC0)
                        SBONDLEN[NCOORD] = np.linalg.norm(A)
                        EBONDLEN[NCOORD,CTRAJ] = SBONDLEN[NCOORD]
                    FBONDLEN += SBONDLEN
                    print '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                    CTRAJ += 1
                    if TSTEPS == TSMAX:
                        ETRAJ += 1
                else:
                    print '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                    print >> ERROR, '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                    ERRFLAG = 1
                TTRAJ += 1
        ## SUMMARY OF RESULTS ##
        if CTRAJ == 0:
            print 'No trajectories completed within %0*.2f.' % (len(str(TSMAX)),TCOLL)
        else:
            ## MEAN AND STANDARD DEVIATION FOR BOND LENGTH ##
            EBONDLEN = np.delete(EBONDLEN, np.arange(CTRAJ, TTRAJ), axis = 1)
            EBONDLEN = np.std(EBONDLEN, axis = 1)
            FBONDLEN = FBONDLEN/CTRAJ
            print 'Total Trajectories:', '%04d' % (TTRAJ)
            print 'Completed Trajectories:', '%04d' % (CTRAJ)
            print 'Excellent Trajectories:', '%04d' % (ETRAJ)
            print >> OUTPUT, 'Total Trajectories: ', '%04d' % (TTRAJ)
            print >> OUTPUT, 'Completed Trajectories: ', '%04d' % (CTRAJ)
            print >> OUTPUT, 'Excellent Trajectories: ', '%04d' % (ETRAJ)
            for NCOORD in np.arange(NCOORDS):
                print >> OUTPUT, '%0*.2f' % (len(str((TSMAX))) + 2,DT*ODATA*CDATA*NCOORD), '%08.3f' % (FBONDLEN[NCOORD]), '%07.3f' % (EBONDLEN[NCOORD])
        if ERRFLAG == 1:
            print 'One or more trajectories did not finish within %0*.2f femtoseconds, check bl_mean_ensemble.err.' % (len(str(TSMAX)),TCOLL)
        else:
            os.remove('%s/bl_mean_ensemble.err' % (CWD))

    ## CALCULATE BOND LENGTH FROM ENSEMBLE OF TRAJECTORIES AT ALL TIME-STEPS ##
    if DYNQ == 0 and TYPEQ == 1: ## ALL FROM ENSEMBLE
        print 'Collecting all bond lengths from ensemble.  Please wait ...'
        ## GENERATE OUTPUT AND ERROR FILES ##
        OUTPUT = open('%s/bl_raw_ensemble.out' % (CWD),'w')
        ERROR = open('%s/bl_raw_ensemble.err' % (CWD),'w')
        TTRAJ = 0
        ETRAJ = 0
        ERRFLAG = 0
        for NEXMD in NEXMDS:
            if not os.path.exists('%s/dirlist1' % (NEXMD)):
                print 'Path %dirlist1 does not exist.' % (NEXMD)
                sys.exit()
            DIRLIST1 = np.int_(np.genfromtxt('%s/dirlist1' % (NEXMD)))
            if isinstance(DIRLIST1, int) == True:
                DIRLIST1 = np.array([DIRLIST1])
            for DIR in DIRLIST1:
                ## DETERMINE NUMBER OF TIME-STEPS COMPLETED ##
                if not os.path.exists('%s/%04d/energy-ev.out' % (NEXMD,DIR)):
                    print >> ERROR, '%s%04d/energy-ev.out' % (NEXMD,DIR), 'does not exist'
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                DATA = open('%s/%04d/energy-ev.out' % (NEXMD,DIR),'r')
                DATA = DATA.readlines()
                TSTEPS = len(DATA) - 1
                ## GENERATE ARRAY WITH INDICES OF THE COORDINATE BLOCKS ALONG TRAJECTORY ##
                if not os.path.exists('%s/%04d/coords.xyz' % (NEXMD,DIR)):
                    print >> ERROR, '%s%04d/coords.xyz' % (NEXMD,DIR), 'does not exist'
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                DATA = open('%s/%04d/coords.xyz' % (NEXMD,DIR),'r')
                DATA = DATA.readlines()
                LENC = len(DATA)
                NCOORDS = 0
                CINDEX = 0
                TFLAG1 = 0
                TFLAG2 = 0
                TFLAG3 = 0
                ARRAY = np.array([])
                for LINE in DATA:
                    if 'time' in LINE:
                        if NCOORDS == 0:
                            TINIT = np.float(LINE.split()[-1])
                            if TINIT != TINITH:
                                TFLAG1 = 1
                                continue
                        else:
                            TIME = np.around(np.float(LINE.split()[-1]), decimals = 3)
                            if TIME > TCOLL:
                                TFLAG3 = 1
                                continue
                            if TIME != TIMES[NCOORDS]:
                                TFLAG2 = 1
                                continue
                        NCOORDS += 1
                        ARRAY = np.append(ARRAY,CINDEX)
                    CINDEX += 1
                if TFLAG1 == 1:
                    print >> ERROR, 'Initial time in %s%04d/coords.xyz does not match time_init in %s/header.' % (NEXMD,DIR,NEXMDIR)
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                if TFLAG2 == 1:
                    print >> ERROR, 'There is an inconsistency in time-step in %s%04d/coords.xyz.' % (NEXMD,DIR)
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                ## APPEND LINES FOR LAST COORDINATE SET ##
                if TFLAG3 == 1:
                    ARRAY = np.append(ARRAY,CINDEX)
                else:
                    ARRAY = np.append(ARRAY, LENC + 1)
                ARRAY = np.int_(ARRAY)
                ## CHECKS TO ENSURE BOND LENGTH CALCULATION ##
                if NCOORDS == 0:
                    print >> ERROR, 'No coordinates were found in %s%04d/coords.xyz' % (NEXMD,DIR)
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                if NCOORDS == 1:
                    print >> ERROR, 'Only initial coordinates, at %.2f fs, were found in %s%04d/coords.xyz.' % (TINIT,NEXMD,DIR)
                    ERRFLAG = 1
                    TTRAJ += 1
                    continue
                ## CALCULATE BOND LENGTH ALONG A SINGLE TRAJECTORY ##
                for NCOORD in np.arange(NCOORDS):
                    COORDS = DATA[ARRAY[NCOORD]+1:ARRAY[NCOORD+1]-1:1]
                    VEC0 = np.float_(COORDS[LINES[0]].split()[1:])
                    VEC1 = np.float_(COORDS[LINES[1]].split()[1:])
                    A = np.subtract(VEC1, VEC0)
                    BL = np.linalg.norm(A)
                    print >> OUTPUT, '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2,DT*ODATA*CDATA*NCOORD), '%08.3f' % (BL)
                print '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                if TSTEPS == TSMAX:
                    ETRAJ += 1
                else:
                    print '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                    print >> ERROR, '%s%04d' % (NEXMD,DIR), '%0*.2f' % (len(str((TSMAX))) + 2, (TSTEPS - 1)*DT)
                    ERRFLAG = 1
                TTRAJ += 1
        ## SUMMARY OF RESULTS ##
        if TTRAJ == 0:
            print 'No trajectories completed within %0*.2f.' % (len(str(TSMAX)),TCOLL)
        else:
            print 'Total Trajectories:', '%04d' % (TTRAJ)
            print 'Excellent Trajectories:', '%04d' % (ETRAJ)
        if ERRFLAG == 1:
            print 'One or more trajectories have experienced an error, check bl_raw_ensemble.err.'
        else:
            os.remove('%s/bl_raw_ensemble.err' % (CWD))



