#/usr/bin/python

'''
 ___________________________________________________________________
|                                                                   |
| This function collects timings from all trajectories.             |
|                                                                   |
| If this function is requested, the timings located at the end of  |
| the standard output files (i.e. md.out) are outputted to a file   |
| called 'timing.out'.  The first column is directory of the        |
| trajectory, followed by its total CPU time, and timings for the   |
| ground state, excited states, adiabatic forces, and non-adiabatic |
| derivatives, respectively.  These timings, averaged over all      |
| trajectories, are also printed to screen when this function is    |
| executed.  An error file called 'timing.err' will be generated if |
| any problems occur such as non-existent or incomplete files.      |
|___________________________________________________________________|

'''

import numpy as np
import os
import sys
import subprocess
import shlex
import glob

CWD = os.getcwd()

def TIMING(PATHTOTIME):

    print 'Collecting timings from trajectories.'

## DIRECTORY NAMES ##
    NEXMDIR = raw_input('NEXMD directory: ')
    if not os.path.exists(NEXMDIR):
        print 'Path %s does not exist.' % (NEXMDIR)
        sys.exit()
    
## COLLECT AND CHECK TIMINGS ##
    print 'Collecting timings. Please wait ...'
    if not os.path.exists('%s/getexcited_package/collectime.sh' % (PATHTOTIME)):
        print 'The script, collectime.sh, must be in the getexcited_package.'
        sys.exit()
    NEXMDS = glob.glob('%s/NEXMD*/' % (NEXMDIR))
    NEXMDS.sort()
    if len(NEXMDS) == 0:
        print 'There are no NEXMD folders in %s.' % (NEXMDIR)
        sys.exit()
    ERROR = open('%s/timing.err' % (CWD),'w')
    ERRFLAG = 0
    for NEXMD in NEXMDS:
        if not os.path.exists('%s/%s/dirlist1' % (CWD,NEXMD)):
            print 'Path %s/%sdirlist1 does not exist.' % (CWD,NEXMD)
            sys.exit()
        DIRLIST1 = np.int_(np.genfromtxt('%s/%s/dirlist1' % (CWD,NEXMD)))
        if isinstance(DIRLIST1,int) == True:
            DIRLIST1 = np.array([DIRLIST1])
        for DIR in DIRLIST1:
            if not os.path.exists('%s/%s/%04d' % (CWD,NEXMD,DIR)):
                print >> ERROR, '%s%04d' % (NEXMD,DIR), 'does not exist'
                ERRFLAG = 1
                continue
            os.chdir('%s/%s/%04d' % (CWD,NEXMD,DIR))
            if not os.path.exists('%s/%s/%04d/md.out' % (CWD,NEXMD,DIR)):
                print >> ERROR, '%s%04d/md.out' % (NEXMD,DIR), 'does not exist'
                ERRFLAG = 1
                continue
            subprocess.call(shlex.split('sh %s/getexcited_package/collectime.sh' % (PATHTOTIME)))
            if not os.path.exists('%s/%s/%04d/timing.out' % (CWD,NEXMD,DIR)):
                print >> ERROR, '%s/%04d/timing.out' % (NEXMD,DIR), 'does not exist'
                ERRFLAG = 1
                continue
            with open('%s/%s/%04d/timing.out' % (CWD,NEXMD,DIR),'r') as DATA:
                DATA = DATA.readlines()
                if len(DATA) != 6 or 'MD total CPU time' not in DATA[0]:
                    print >> ERROR, '%s%04d/timing.out' % (NEXMD,DIR), 'is incomplete'
                    ERRFLAG = 1
            print '%s%04d' % (NEXMD,DIR)
    if ERRFLAG == 1:
        print 'One or more trajectories did not finish, check timing.err.'
        CONTQ = input('Continue? Answer YES [1] or NO [0]: ')
        if CONTQ not in [1,0]:
            print 'Answer must be 1 or 0.'
            sys.exit()
        if CONTQ == 0:
            sys.exit()
    else:
        os.remove('%s/timing.err' % (CWD))

## EXTRACT AND COMBINE TIMINGS ##
    TIMING = open('%s/timing.out' % (CWD),'w')
    TIMES = np.zeros(1) ## CHANGE 5 to 1 FOR OLD CODE
    TRAJ = 0
    for NEXMD in NEXMDS:
        DIRLIST1 = np.int_(np.genfromtxt('%s/%s/dirlist1' % (CWD,NEXMD)))
        if isinstance(DIRLIST1,int) == True:
            DIRLIST1 = np.array([DIRLIST1])
        for DIR in DIRLIST1:
            DATA = open('%s/%s/%04d/timing.out' % (CWD,NEXMD,DIR),'r')
            DATA = DATA.readlines()
            #DATA = np.delete(DATA, (1), axis = 0) ## COMMENT OUT FOR OLD CODE
            TARRAY = np.array([])
            INDEX = 0
            for LINE in DATA:
                VAL = LINE.split()
                if INDEX == 0:
                    TARRAY = np.append(TARRAY, np.float(VAL[5]))
                #else: ## COMMENT OUT FOR OLD CODE
                #    TARRAY = np.append(TARRAY, np.float(VAL[0]))
                INDEX += 1
            TIMES += TARRAY
            print >> TIMING, '%s%04d' % (NEXMD,DIR), ' '.join(str('%06d' % (x)) for x in TARRAY)
            os.remove('%s/%s/%04d/timing.out' % (CWD,NEXMD,DIR))
            print '%s%04d' % (NEXMD,DIR)
            TRAJ += 1
    TIMES = TIMES/TRAJ
    print 'Mean Total CPU [s]:', '%06d' % (TIMES[0])
    ## COMMENT ALL BELOW FOR OLD CODE ##
    #print 'Mean Ground State [s]:', '%06d' % (TIMES[1])
    #print 'Mean Excited States [s]:', '%06d' % (TIMES[2])
    #print 'Mean Adiabatic Forces [s]:', '%06d' % (TIMES[3])
    #print 'Mean Non-Adiabatic Derivatives [s]:', '%06d' % (TIMES[4])
