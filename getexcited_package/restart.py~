#/usr/bin/python

'''
 ___________________________________________________________________
|                                                                   |
| This function prepares restart input files for NEXMD.             |
|                                                                   |
| If restart input files are requested, the function searches for   |
| trajectories that did not complete up to the user-defined         |
| number of classical steps and prepares input files with the name  |
| 'input.ceon' in their respective directories.  The input file is  |
| prepared with coordinates, velocities, quantum coefficients, and  |
| last-residing surface taken from the 'restart.out' file.  These   |
| are data from the last-generated time-step.  Within each 'NEXMD#'  |
| folder with directories that contain restart input files, a new   |
| 'dirlist' will be generated with a list of restart directories.   |
| An error file, 'restart.err', lists the directories that either   |
| (1) do not contain 'coeff-n.out' files, from which populations    |
| are collected, or (2) have incomplete 'restart.out' files.  The   |
| former generally means the trajectory did not start when NEXMD    |
| was first attempted.  The 'restart.err' file is not generated if  |
| there are no such trajectories.  During every iteration of        |
| requesting restart input files, a file containing the random      |
| seeds is generated with the name 'rseedslist#'.                   |
|___________________________________________________________________|

'''


import numpy as np
import os
import sys
import re
import glob
import filecmp

CWD = os.getcwd()

def EXTRACT(FILE):
    NUM = re.findall('\d+$', FILE)
    return (np.int(NUM[0]) if NUM else 0, FILE)

def RESTART():

    print 'Preparing restart input files for NEXMD.'

## DIRECTORY NAMES ##
    NEXMDIR = raw_input('NEXMD directory: ')
    if not os.path.exists(NEXMDIR):
        print 'Path %s does not exist.' % (NEXMDIR)
        sys.exit()

## CHOOSE CLASSICAL TIME-STEPS ##
    if not os.path.exists('%s/header' % (NEXMDIR)):
        print 'Path %s/header does not exist.' % (NEXMDIR)
        sys.exit()
    HEADER = open('%s/header' % (NEXMDIR),'r')
    HEADER = HEADER.readlines()
    for LINE in HEADER:
        if 'time_step' in LINE:
            DT = np.float(LINE.split()[0][len('time_step='):-1])
        if 'n_class_steps' in LINE:
            TSMAX = np.int(LINE.split()[0][len('n_class_steps='):-1])
    print 'Currently, trajectories are set to run for %d classical steps with a time-step of %.2f fs.\nThis is a total of %.2f fs.' % (TSMAX,DT,TSMAX*DT)
    TSMAXQ = input('Keep this trajectory length? Answer YES [1] or NO [0]: ')
    if TSMAXQ not in [1,0]:
        print 'Answer must be 1 or 0.'
        sys.exit()
    if TSMAXQ == 0:
        NTSMAX = input('Enter new number of classical time-steps: ')
        if type(NTSMAX) != int:
            print 'Answer must be integer.'
            sys.exit()
        if NTSMAX <= TSMAX:
            print 'Answer must be greater than or equal to the previous number of classical steps used, which was %d.' % (TSMAX)
            sys.exit()
        NHEADER = open('%s/nheader' % (NEXMDIR),'w')
        for LINE in HEADER:
            if 'n_class_steps' in LINE:
                NHEADER.write('   n_class_steps=%d, ! Number of classical steps [1]\n' % (NTSMAX))
            else:
                NHEADER.write(LINE)
        NHEADER.close()
        TSMAX = NTSMAX
        os.rename('%s/nheader' % (NEXMDIR), '%s/header' % (NEXMDIR))

## CHOOSE RANDOM SEEDS ##
    NEXMDS = glob.glob('%s/NEXMD*/' % (NEXMDIR))
    NEXMDS.sort()
    if len(NEXMDS) == 0:
        print 'There are no NEXMD folders in %s.' % (NEXMDIR)
        sys.exit()
    NTRAJ = 0
    for NEXMD in NEXMDS:
        if not os.path.exists('%s/dirlist1' % (NEXMD)):
            print 'Path %sdirlist1 does not exist.' % (NEXMD)
            sys.exit()
        DATA = np.int_(np.genfromtxt('%s/dirlist1' % (NEXMD)))
        NTRAJ += len(DATA)
    RANDQ = input('New random seeds? Answer YES [1] or NO [0]: ')
    if RANDQ not in [1,0]:
        print 'Answer must be 1 or 0.'
        sys.exit()
    DATA = glob.glob('%s/rseedslist*' % (NEXMDIR))
    MAXDIR = np.int(EXTRACT(max(DATA,key = EXTRACT))[0])
    if RANDQ == 0:
        RSEEDS = raw_input('Path to random-seeds list (** must be different from past random seeds **): ')
        if not os.path.exists(RSEEDS):
            print 'Path %s does not exist.' % (RSEEDS)
            sys.exit()
        RSEEDS = np.int_(np.genfromtxt('%s' % (RSEEDS)))
        LEN = len(RSEEDS)
        if LEN < NTRAJ:
            print 'Length of random-seeds list must be equal to or greater than the number of trajectories.\nUser inputted a random-seeds list of length %d, while the number of trajectories is %d.' % (LEN,NTRAJ)
            sys.exit()
        for RSEED in RSEEDS:
            if RSEED < 0:
                print 'A negative random seed was detected, %d.\nWithin the getexcited_package, a negative seed is assigned to a trajectory that could not be prepared due to some problem.' % (RSEED)
                sys.exit()

## PREPARE NEXMD RESTART INPUT FILES ##
    HEADER = open('%s/header' % (NEXMDIR),'r')
    HEADER = HEADER.readlines()
    RSEEDSLIST = open('%s/rseedslist%d' % (NEXMDIR,MAXDIR + 1),'w')
    ERROR = open('%s/restart.err' % (CWD),'w')
    RSTFLAG = 0
    TRAJ = 0
    for NEXMD in NEXMDS:
        DIRLIST1 = np.int_(np.genfromtxt('%s/dirlist1' % (NEXMD)))
        DIRLIST = open('%s/dirlist' % (NEXMD),'w')
        for DIR in DIRLIST1:
            if not os.path.exists('%s/%04d/coeff-n.out' % (NEXMD,DIR)):
                print >> ERROR, '%s%04d/coeff-n.out' % (NEXMD,DIR), 'does not exist'
                print >> RSEEDSLIST, '%d' % (-RSEED if RANDQ == 1 else -RSEEDS[TRAJ])
                RSTFLAG = 1
            else:
                DATA = open('%s/%04d/coeff-n.out' % (NEXMD,DIR),'r')
                DATA = DATA.readlines()
                TSTEPS = len(DATA)-1
                if TSTEPS != TSMAX:
                    if not os.path.exists('%s/%04d/restart.out' % (NEXMD,DIR)):
                        print >> ERROR, '%s/%04d/restart.out' % (NEXMD,DIR), 'does not exist'
                        print >> RSEEDSLIST, '%d' % (-RSEED if RANDQ == 1 else -RSEEDS[TRAJ])
                        RSTFLAG = 1
                        break
                    DATA = open('%s/%04d/restart.out' % (NEXMD,DIR),'r')
                    DATA = DATA.readlines()
                    INDEX = 0
                    ARRAY = np.array([])
                    for LINE in DATA:
                        if 'time' in LINE:
                            TIME = np.float(LINE.split()[-1])
                        if 'State' in LINE:
                            STATE = np.int(LINE.split()[-1])
                        if 'Seed' in LINE:
                            RSEED = np.int(LINE.split()[-1])
                        if '$COORD' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        if '$ENDCOORD' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        if '$VELOC' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        if '$ENDVELOC' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        if '$COEFF' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        if '$ENDCOEFF' in LINE:
                            ARRAY = np.append(ARRAY,INDEX)
                        INDEX += 1
                    ARRAY = np.int_(ARRAY)
                    if len(ARRAY) != 6:
                        print >> ERROR, '%s%04d/restart.out' % (NEXMD,DIR), 'is incomplete'
                        print >> RSEEDSLIST, '%d' % (-RSEED if RANDQ == 1 else -RSEEDS[TRAJ])
                        RSTFLAG = 1
                        break
                    COORDS = DATA[ARRAY[0]:ARRAY[1]+1:1]
                    VELOCS = DATA[ARRAY[2]:ARRAY[3]+1:1]
                    COEFFS = DATA[ARRAY[4]:ARRAY[5]+1:1]
                    DATA = glob.glob('%s/view*' % (NEXMDIR))
                    DATA = [ x[:-10] for x in DATA ]
                    if len(DATA) != 0:
                        MAX = np.int(EXTRACT(max(DATA,key = EXTRACT))[0])
                    else:
                        MAX = 0
                    INPUT = open('%s/%04d/input.ceon' % (NEXMD,DIR),'w')
                    for LINE in HEADER:
                        if 'rnd_seed' in LINE:
                            INPUT.write('   rnd_seed=%d, ! Seed for the random number generator\n' % (RSEED if RANDQ == 1 else RSEEDS[TRAJ]))
                        else:
                            if 'exc_state_init_flag' in LINE:
                                INPUT.write('   exc_state_init=%d, ! Initial excited state (0 - ground state) [0]\n' % (STATE))
                            else:
                                if 'time_init' in LINE:
                                    INPUT.write('   time_init=%.1f, ! Initial time, fs [0.00]\n' % (TIME))
                                else:
                                    if 'n_class_steps' in LINE:
                                        INPUT.write('   n_class_steps=%d, ! Number of classical steps [1]\n' % (np.int(TSMAX-TIME/DT)))
                                    else:
                                        if 'out_count_init' in LINE:
                                            INPUT.write('   out_count_init=%d, ! Initial count for output files [0]\n' % (MAX))
                                        else:
                                            if 'nucl_coord_veloc' in LINE:
                                                for LINE in COORDS:
                                                    INPUT.write(LINE)
                                                INPUT.write('\n')
                                                for LINE in VELOCS:
                                                    INPUT.write(LINE)
                                            else:
                                                if 'quant_amp_phase' in LINE:
                                                    for LINE in COEFFS:
                                                        INPUT.write(LINE)
                                                else:
                                                    INPUT.write(LINE)
                    print >> DIRLIST, '%04d' % (DIR)
                    print '%s%04d' % (NEXMD,DIR)
                print >> RSEEDSLIST, '%d' % (RSEED if RANDQ == 1 else RSEEDS[TRAJ])
            TRAJ += 1
    if filecmp.cmp('%s/rseedslist%d' % (NEXMDIR,MAXDIR + 1), '%s/rseedslist%d' % (NEXMDIR,MAXDIR + 1)):
        os.remove('%s/rseedslist%d' % (NEXMDIR,MAXDIR + 1))
    if RSTFLAG == 1:
        print 'One or more trajectories cannot be restarted, check restart.err.'
    else:
        os.remove('%s/restart.err' % (CWD))
